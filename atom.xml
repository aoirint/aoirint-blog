<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>えやみぐさ</title><link href="https://blog.aoirint.com/" rel="alternate"></link><link href="https://blog.aoirint.com/atom.xml" rel="self"></link><id>https://blog.aoirint.com/</id><updated>2020-11-09T06:10:00+09:00</updated><entry><title>OBS Studio on Ubuntu + NVIDIA GPUでWindow Captureを動作させる</title><link href="https://blog.aoirint.com/snippet/2020/obs_ubuntu_nvidia_window_capture/" rel="alternate"></link><published>2020-11-09T06:10:00+09:00</published><updated>2020-11-09T06:10:00+09:00</updated><id>tag:blog.aoirint.com,2020-11-09 06:10:00.000000:/snippet/2020/obs_ubuntu_nvidia_window_capture/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_obs_ubuntu_nvidia_window_capture_index_md_OBS_Studio_on_Ubuntu_NVIDIA_GPUでWindow_Captureを動作させる_1"&gt;OBS Studio on Ubuntu + NVIDIA GPUでWindow Captureを動作させる&lt;/h1&gt;
&lt;p&gt;Ubuntu + NVIDIA GPU環境では、OBS StudioでWindow Captureしようとすると
一部のアプリケーションで黒画面の表示になり動作しない。
おそらくOpenGLで描画しているものが対象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://obsproject.com/forum/threads/solved-window-capture-black-screen.47082/"&gt;Bug Report - [SOLVED] Window Capture Black Screen | OBS Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私の環境では
&lt;code&gt;Window Capture (Xcomposite)&lt;/code&gt;の設定欄をスクロールして
&lt;code&gt;Use alpha-less&lt;/code&gt;&lt;/p&gt;</summary></entry><entry><title>PulseAudioで特定のアプリケーションからの音声出力だけを分離する</title><link href="https://blog.aoirint.com/snippet/2020/pulseaudio_split_output/" rel="alternate"></link><published>2020-11-09T06:00:00+09:00</published><updated>2020-11-09T06:00:00+09:00</updated><id>tag:blog.aoirint.com,2020-11-09 06:00:00.000000:/snippet/2020/pulseaudio_split_output/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_pulseaudio_split_output_index_md_PulseAudioで特定のアプリケーションからの音声出力だけを分離する_1"&gt;PulseAudioで特定のアプリケーションからの音声出力だけを分離する&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pacmd load-module module-null-sink &lt;span class="nv"&gt;sink_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DummyOutput0 &lt;span class="nv"&gt;sink_properties&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;device.description&lt;span class="o"&gt;=&lt;/span&gt;DummyOutput0
pacmd load-module module-loopback &lt;span class="nv"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DummyOutput0.monitor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pavucontrol&lt;/code&gt;または&lt;code&gt;PulseAudio Volume Control&lt;/code&gt;の&lt;code&gt;Playback&lt;/code&gt;から
目的のアプリケーションの出&lt;/p&gt;</summary></entry><entry><title>スニペット: Docker + Docker Compose on Vagrant Ubuntu Server</title><link href="https://blog.aoirint.com/snippet/2020/docker_on_vagrant_ubuntu_server/" rel="alternate"></link><published>2020-10-22T16:30:00+09:00</published><updated>2020-10-22T16:30:00+09:00</updated><id>tag:blog.aoirint.com,2020-10-22 16:30:00.000000:/snippet/2020/docker_on_vagrant_ubuntu_server/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_docker_on_vagrant_ubuntu_server_index_md_スニペット_Docker_Docker_Compose_on_Vagrant_Ubuntu_Server_1"&gt;スニペット: Docker + Docker Compose on Vagrant Ubuntu Server&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;Downloads – Oracle VM VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vagrantup.com/downloads.html"&gt;Downloads | Vagrant by HashiCorp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.vagrantup.com/ubuntu/boxes/bionic64"&gt;Vagrant box ubuntu/bionic64 - Vagrant Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Install Docker Engine on Ubuntu | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/compose/install/"&gt;Install Docker Compose | Docker Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kvm (qemu)を使うこともできるらしいが、対応したb&lt;/p&gt;</summary></entry><entry><title>ロータリエンコーダ付きステッピングモータをArduinoで制御して角度を取得する</title><link href="https://blog.aoirint.com/entry/2020/stepping_motor/" rel="alternate"></link><published>2020-10-06T07:00:00+09:00</published><updated>2020-10-06T07:00:00+09:00</updated><id>tag:blog.aoirint.com,2020-10-06 07:00:00.000000:/entry/2020/stepping_motor/</id><summary type="html">&lt;h1 class="md_header_block" id="h_entry_2020_stepping_motor_index_md_ロータリエンコーダ付きステッピングモータをArduinoで制御して角度を取得する_1"&gt;ロータリエンコーダ付きステッピングモータをArduinoで制御して角度を取得する&lt;/h1&gt;
&lt;h2 class="md_header_block" id="h_entry_2020_stepping_motor_index_md_機材_2"&gt;機材&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arduino UNO（中華）&lt;/li&gt;
&lt;li&gt;ロータリエンコーダ付きステッピングモータ&lt;ul&gt;
&lt;li&gt;PKP214U06A-R2EL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.orientalmotor.co.jp/products/detail.action?hinmei=PKP214U06A-R2EL-L"&gt;PKP214U06A-R2EL-L｜PKPシリーズ／PKシリーズ｜ステッピングモーター｜オリエンタルモーター株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;モータ部説明書（PDF、HM-7433J.pdf）&lt;/li&gt;
&lt;li&gt;ロータリエンコーダ部説明書（PDF、HM-7439JE.pdf）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.orientalmotor.co.jp/file_addon/products/st/image/tj_pkp214u06a-r2el-l_d.gif"&gt;特性図（画像）&lt;/a&gt;（DC24V駆動時）&lt;/li&gt;
&lt;li&gt;モータ部&lt;ul&gt;
&lt;li&gt;2相&lt;/li&gt;
&lt;li&gt;ユニポーラ5本リード線&lt;/li&gt;
&lt;li&gt;基本ステップ角度1.8°&lt;/li&gt;
&lt;li&gt;AC 50&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary></entry><entry><title>スニペット: PulseAudioでマイク入力をスピーカから出力する</title><link href="https://blog.aoirint.com/snippet/2020/pulseaudio_mic_input_to_speaker_output/" rel="alternate"></link><published>2020-10-04T03:40:00+09:00</published><updated>2020-10-04T03:40:00+09:00</updated><id>tag:blog.aoirint.com,2020-10-04 03:40:00.000000:/snippet/2020/pulseaudio_mic_input_to_speaker_output/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_pulseaudio_mic_input_to_speaker_output_index_md_スニペット_PulseAudioでマイク入力をスピーカから出力する_1"&gt;スニペット: PulseAudioでマイク入力をスピーカから出力する&lt;/h1&gt;
&lt;p&gt;まずはPCに接続されている音声入力デバイスのIDを確認する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pactl list short sources
&lt;span class="c1"&gt;# pactl list sources&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;3   alsa_output.pci-0000_00_1f.3.analog-stereo.monitor  module-alsa-card.c  s16le 2ch 44100Hz   RUNNING
4   alsa_output.pci-0000_01_00.1.hdmi-stereo.monitor    module-alsa-car&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>スニペット: Ubuntu, pyenv環境でtkinterを使う</title><link href="https://blog.aoirint.com/snippet/2020/setup_python_tkinter_pyenv_ubuntu/" rel="alternate"></link><published>2020-10-04T03:30:00+09:00</published><updated>2020-10-04T03:30:00+09:00</updated><id>tag:blog.aoirint.com,2020-10-04 03:30:00.000000:/snippet/2020/setup_python_tkinter_pyenv_ubuntu/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_setup_python_tkinter_pyenv_ubuntu_index_md_スニペット_Ubuntu_pyenv環境でtkinterを使う_1"&gt;スニペット: Ubuntu, pyenv環境でtkinterを使う&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install tk-dev python-tk python3-tk
pyenv install &lt;span class="m"&gt;3&lt;/span&gt;.8.6
pyenv global &lt;span class="m"&gt;3&lt;/span&gt;.8.6

python3 -m tkinter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>スニペット: Ubuntu プロキシ設定</title><link href="https://blog.aoirint.com/snippet/2020/ubuntu_proxy/" rel="alternate"></link><published>2020-10-02T15:40:00+09:00</published><updated>2020-10-02T15:40:00+09:00</updated><id>tag:blog.aoirint.com,2020-10-02 15:40:00.000000:/snippet/2020/ubuntu_proxy/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_ubuntu_proxy_index_md_スニペット_Ubuntu_プロキシ設定_1"&gt;スニペット: Ubuntu プロキシ設定&lt;/h1&gt;
&lt;h2 class="md_header_block" id="h_snippet_2020_ubuntu_proxy_index_md_User_Desktop__2"&gt;User (Desktop)&lt;/h2&gt;
&lt;p&gt;Settings &amp;gt; Network &amp;gt; Network Proxy &amp;gt; Manualに設定する。
自動的に環境変数HTTP_PROXY, HTTPS_PROXYにスキームが追加された状態で設定される。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP Proxy: &lt;code&gt;proxy&lt;/code&gt; &lt;code&gt;port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;HTTPS Proxy: &lt;code&gt;proxy&lt;/code&gt; &lt;code&gt;port&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;curlやwget、pipなど主要コマンドは
注意点として、別ユーザとしてコマンドを実行すると環境変数が引き継がれない。
例えばsudo curlしたときにプロキシに接続しにいかない。&lt;/p&gt;
&lt;h2 class="md_header_block" id="h_snippet_2020_ubuntu_proxy_index_md_sudoers_environment_keep_3"&gt;sudoe&lt;/h2&gt;</summary></entry><entry><title>スニペット: Python Requests</title><link href="https://blog.aoirint.com/snippet/2020/python_requests/" rel="alternate"></link><published>2020-09-28T11:30:00+09:00</published><updated>2020-09-28T11:30:00+09:00</updated><id>tag:blog.aoirint.com,2020-09-28 11:30:00.000000:/snippet/2020/python_requests/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_python_requests_index_md_スニペット_Python_Requests_1"&gt;スニペット: Python Requests&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class="md_header_block" id="h_snippet_2020_python_requests_index_md_Headers_2"&gt;Headers&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 class="md_header_block" id="h_snippet_2020_python_requests_index_md_Copy_cookies_from_Selenium_3"&gt;Copy cookies from Selenium&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cookie&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cookies&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_cookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'domain'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;ses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cookies&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>スニペット: docker-composeによるPython + Selenium環境</title><link href="https://blog.aoirint.com/snippet/2020/docker_compose_python_selenium/" rel="alternate"></link><published>2020-09-28T11:00:00+09:00</published><updated>2020-09-28T11:00:00+09:00</updated><id>tag:blog.aoirint.com,2020-09-28 11:00:00.000000:/snippet/2020/docker_compose_python_selenium/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_docker_compose_python_selenium_index_md_スニペット_docker_composeによるPython_Selenium環境_1"&gt;スニペット: docker-composeによるPython + Selenium環境&lt;/h1&gt;
&lt;p&gt;docker-compose.yml&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'3.8'&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./app/&lt;/span&gt;
    &lt;span class="nt"&gt;entrypoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt; &lt;span class="s"&gt;"wait-for-it"&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"selenium:4444"&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"--"&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"python3"&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"/code/main.py"&lt;/span&gt; &lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;volumes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./work:/work&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;SELENIUM_URL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;http://selenium:4444&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary></entry><entry><title>スニペット: docker-compose run --rm終了時に他のコンテナも削除するシェルスクリプト</title><link href="https://blog.aoirint.com/snippet/2020/docker_compose_run_rm_linked_containers/" rel="alternate"></link><published>2020-09-28T10:10:00+09:00</published><updated>2020-09-28T10:10:00+09:00</updated><id>tag:blog.aoirint.com,2020-09-28 10:10:00.000000:/snippet/2020/docker_compose_run_rm_linked_containers/</id><summary type="html">&lt;h1 class="md_header_block" id="h_snippet_2020_docker_compose_run_rm_linked_containers_index_md_スニペット_docker_compose_run_rm終了時に他のコンテナも削除するシェルスクリプト_1"&gt;スニペット: docker-compose run --rm終了時に他のコンテナも削除するシェルスクリプト&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;docker-compose run --rm app&lt;/code&gt;を実行するとサービスappが起動してコンテナが作られ、実行が終わり次第コンテナは削除される。
このとき削除されるコンテナはforegroundで実行されたもののみで、
&lt;code&gt;depends_on&lt;/code&gt;などの設定からリンクを通じて起動した他サービスのdetachedコンテナは削除されず残り続ける。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/docker/compose/issues/2791" title="docker-compose run &amp;lt;container&amp;gt; --rm does not rm links · Issue #2791 · docker/compose"&gt;docker-compose run &lt;container&gt; --rm does not rm links · Issue #&lt;/container&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary></entry></feed>